// Generated by CoffeeScript 1.6.1
(function() {
  var check_parent, client, id, keepalive, logger, lol_client, models, options, _check_parent, _keepalive;

  lol_client = require('./lib/lol-client');

  models = require('./lib/models');

  logger = require('./logger');

  options = {};

  client = {};

  keepalive = {};

  id = '';

  _keepalive = function() {
    var timer;
    timer = setTimeout(function() {
      client.emit('timeout');
      return logger.error("client: " + id + ": keepalive timeout");
    }, 10000);
    return client.keepAlive(function(err, result) {
      clearTimeout(timer);
      if (Math.random() >= 0.75) {
        return logger.info("client: " + id + ": Heartbeat");
      }
    });
  };

  _check_parent = function() {
    try {
      return process.send({
        'event': 'check'
      });
    } catch (e) {
      logger.warn("client: " + id + ": parent has died, closing");
      return process.exit(5);
    }
  };

  check_parent = setInterval(_check_parent, 2000);

  process.on('SIGTERM', function() {
    logger.warn("client: " + id + ": got SIGTERM");
    return process.exit(0);
  }).on('message', function(msg) {
    var model, query, query_options, _get;
    if (msg.event === 'setup') {
      options = {
        region: msg.options.region,
        username: msg.options.username,
        password: msg.options.password,
        version: msg.options.version
      };
      return id = "" + options.region + ":" + options.username;
    } else if (msg.event === 'connect') {
      client = new lol_client(options);
      client.once('connection', function() {
        process.send({
          'event': 'connected'
        });
        return keepalive = setInterval(function() {
          return _keepalive();
        }, 120000);
      }).once('throttled', function() {
        process.send({
          'event': 'throttled'
        });
        return process.exit(3);
      }).once('timeout', function() {
        process.send({
          'event': 'timeout'
        });
        return process.exit(5);
      });
      client.connect();
      return process.title = "client.js: " + id;
    } else if (msg.event === 'get') {
      _get = function(data, extra) {
        if (extra == null) {
          extra = {};
        }
        extra.region = options.region;
        return process.send({
          'event': "" + msg.uuid + "__finished",
          'data': data,
          'extra': extra,
          'query': query
        });
      };
      query = msg.query;
      query_options = {
        'client': client
      };
      if (msg.extra != null) {
        query_options['extra'] = msg.extra;
      }
      model = new models[msg.model](_get, query_options);
      return model.get(query);
    }
  });

}).call(this);
