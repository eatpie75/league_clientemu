// Generated by CoffeeScript 1.7.1
(function() {
  var EventEmitter, LolClient, RTMPClient, RTMPCommand, logger, loginQueue, lolPackets, rtmp, tls,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  tls = require('tls');

  loginQueue = require('./login-queue');

  lolPackets = require('./packets');

  rtmp = require('namf/rtmp');

  logger = require('winston');

  RTMPClient = rtmp.RTMPClient;

  RTMPCommand = rtmp.RTMPCommand;

  EventEmitter = require('events').EventEmitter;

  LolClient = (function(_super) {
    __extends(LolClient, _super);

    LolClient.prototype._rtmpHosts = {
      'na': 'prod.na1.lol.riotgames.com',
      'euw': 'prod.euw1.lol.riotgames.com',
      'eune': 'prod.eun1.lol.riotgames.com',
      'br': 'prod.br.lol.riotgames.com',
      'pbe': 'prod.pbe1.lol.riotgames.com'
    };

    LolClient.prototype._loginQueueHosts = {
      'na': 'lq.na1.lol.riotgames.com',
      'euw': 'lq.euw1.lol.riotgames.com',
      'eune': 'lq.eun1.lol.riotgames.com',
      'br': 'lq.br.lol.riotgames.com',
      'pbe': 'lq.pbe1.lol.riotgames.com'
    };

    function LolClient(options) {
      this.options = options;
      this.keepAlive = __bind(this.keepAlive, this);
      this.getAllLeaguesForPlayer = __bind(this.getAllLeaguesForPlayer, this);
      this.getMasteryBook = __bind(this.getMasteryBook, this);
      this.getSpectatorInfo = __bind(this.getSpectatorInfo, this);
      this.getSummonerName = __bind(this.getSummonerName, this);
      this.getSummonerData = __bind(this.getSummonerData, this);
      this.getTeamById = __bind(this.getTeamById, this);
      this.getTeamsForSummoner = __bind(this.getTeamsForSummoner, this);
      this.getAggregatedStats = __bind(this.getAggregatedStats, this);
      this.getMatchHistory = __bind(this.getMatchHistory, this);
      this.getSummonerStats = __bind(this.getSummonerStats, this);
      this.getSummonerByName = __bind(this.getSummonerByName, this);
      this.performSubscription = __bind(this.performSubscription, this);
      this.performAuth = __bind(this.performAuth, this);
      this.performLogin = __bind(this.performLogin, this);
      if (this.options.region) {
        this.options.host = this._rtmpHosts[this.options.region];
        this.options.lqHost = this._loginQueueHosts[this.options.region];
      } else {
        this.options.host = this.options.host;
        this.options.lqHost = this.option.lqHost;
      }
      this.options.port = this.options.port || 2099;
      this.options.username = this.options.username;
      this.options.password = this.options.password;
      this.options.version = this.options.version;
      this.options.debug = this.options.debug || false;
      this.keep_alive_counter = 0;
      if (this.options.debug) {
        logger.info('lol-client: options:', this.options);
      }
    }

    LolClient.prototype.connect = function(cb) {
      return this.checkLoginQueue((function(_this) {
        return function(err, token) {
          if (err) {
            logger.error('lol-client: connection error', err);
          }
          return _this.sslConnect(function(err, stream) {
            _this.stream = stream;
            return _this.setupRTMP();
          });
        };
      })(this));
    };

    LolClient.prototype.checkLoginQueue = function(cb) {
      if (this.options.debug) {
        logger.info('lol-client: Checking Login Queue');
      }
      return loginQueue(this.options.lqHost, this.options.username, this.options.password, (function(_this) {
        return function(err, response) {
          if (err) {
            logger.error('lol-client: Login Queue Failed', err);
            return cb(err);
          } else {
            if (!response.token) {
              return cb(new Error('Login Queue Response had no token'));
            } else {
              if (_this.options.debug) {
                logger.info('lol-client: Login Queue Response', response);
              }
              _this.options.queueToken = response.token;
              if (response.ip_address != null) {
                _this.options.queue_ip = response.ip_address;
              }
              return cb(null, _this.options.queueToken);
            }
          }
        };
      })(this));
    };

    LolClient.prototype.sslConnect = function(cb) {
      var stream, to;
      if (this.options.debug) {
        logger.info('lol-client: Connecting to SSL');
      }
      to = {};
      stream = tls.connect(this.options.port, this.options.host, {
        'rejectUnauthorized': false
      }, function() {
        clearTimeout(to);
        return cb(null, stream);
      });
      to = setTimeout(function() {
        logger.error('lol-client: ssl timeout');
        stream.destroySoon();
        return process.exit(1);
      }, 30000);
      return stream.on('error', function() {
        return stream.destroySoon();
      });
    };

    LolClient.prototype.setupRTMP = function() {
      if (this.options.debug) {
        logger.info('lol-client: Setting up RTMP Client');
      }
      this.rtmp = new RTMPClient(this.stream);
      if (this.options.debug) {
        logger.info('lol-client: Handshaking RTMP');
      }
      return this.rtmp.handshake((function(_this) {
        return function(err) {
          if (err) {
            return _this.stream.destroy();
          } else {
            return _this.performNetConnect();
          }
        };
      })(this));
    };

    LolClient.prototype.performNetConnect = function() {
      var ConnectPacket, cmd, pkt;
      if (this.options.debug) {
        logger.info('lol-client: Performing RTMP NetConnect');
      }
      ConnectPacket = lolPackets.ConnectPacket;
      pkt = new ConnectPacket(this.options);
      cmd = new RTMPCommand(0x14, 'connect', null, pkt.appObject(), [false, 'nil', '', pkt.commandObject()]);
      return this.rtmp.send(cmd, (function(_this) {
        return function(err, result) {
          if (err) {
            if (_this.options.debug) {
              logger.error('lol-client: NetConnect failed');
            }
            return _this.stream.destroy();
          } else {
            if (_this.options.debug) {
              logger.info('lol-client: NetConnect success');
            }
            return _this.performLogin(result);
          }
        };
      })(this));
    };

    LolClient.prototype.performLogin = function(result) {
      var LoginPacket, cmd;
      if (this.options.debug) {
        logger.info('lol-client: Performing RTMP Login...');
      }
      LoginPacket = lolPackets.LoginPacket;
      this.options.dsid = result.args[0].id;
      cmd = new RTMPCommand(0x11, null, null, null, [new LoginPacket(this.options).generate(this.options.version)]);
      return this.rtmp.send(cmd, (function(_this) {
        return function(err, result) {
          if (err) {
            if (_this.options.debug) {
              logger.error('lol-client: RTMP Login failed');
            }
            return _this.stream.destroy();
          } else {
            return _this.performAuth(result);
          }
        };
      })(this));
    };

    LolClient.prototype.performAuth = function(result) {
      var AuthPacket, cmd;
      if (this.options.debug) {
        logger.info('lol-client: Performing RTMP Auth...');
      }
      AuthPacket = lolPackets.AuthPacket;
      this.options.authToken = result.args[0].body.object.token;
      this.options.account_id = result.args[0].body.object.accountSummary.object.accountId.value;
      cmd = new RTMPCommand(0x11, null, null, null, [new AuthPacket(this.options).generate()]);
      return this.rtmp.send(cmd, (function(_this) {
        return function(err, result) {
          if (err) {
            if (_this.options.debug) {
              return logger.error('lol-client: RTMP Auth failed');
            }
          } else {
            if (_this.options.debug) {
              logger.info('lol-client: Auth Completed');
            }
            return _this.performSubscription(result);
          }
        };
      })(this));
    };

    LolClient.prototype.performSubscription = function(result) {
      var SubscribePacket, body_string, cmd, failure, header_string, subscription, success, to_subscribe, _cb, _i, _len;
      if (this.options.debug) {
        logger.info('lol-client: Performing RTMP Subscriptions...');
      }
      SubscribePacket = lolPackets.SubscribePacket;
      to_subscribe = ['bc', 'cn', 'gn'];
      success = [];
      failure = [];
      for (_i = 0, _len = to_subscribe.length; _i < _len; _i++) {
        subscription = to_subscribe[_i];
        body_string = "" + subscription + "-" + this.options.account_id;
        header_string = subscription === 'bc' ? 'bc' : "" + subscription + "-" + this.options.account_id;
        cmd = new RTMPCommand(0x11, null, null, null, [new SubscribePacket(this.options).generate(body_string, header_string)]);
        this.rtmp.send(cmd, (function(_this) {
          return function(err, result) {
            if (err) {
              logger.error("lol-client: Subscription to " + body_string + " failed");
              failure.push("" + subscription);
            } else {
              if (_this.options.debug) {
                logger.info("lol-client: Subscription to " + header_string + " completed");
              }
              success.push("" + subscription);
            }
            return _cb();
          };
        })(this));
      }
      return _cb = (function(_this) {
        return function() {
          if (success.length === to_subscribe.length) {
            if (_this.options.debug) {
              logger.info('lol-client: Connection Completed');
            }
            _this.emit('connection');
            return _this.rtmp.ev.on('throttled', function() {
              return _this.emit('throttled');
            });
          } else {
            if (_this.options.debug) {
              return logger.error('lol-client: Something has gone wrong', [to_subscribe, success, failure]);
            }
          }
        };
      })(this);
    };

    LolClient.prototype.getSummonerByName = function(name, cb) {
      var LookupPacket, cmd;
      if (this.options.debug) {
        logger.info("Finding player by name: " + name);
      }
      LookupPacket = lolPackets.LookupPacket;
      cmd = new RTMPCommand(0x11, null, null, null, [new LookupPacket(this.options).generate(name)]);
      return this.rtmp.send(cmd, function(err, result) {
        var _ref, _ref1;
        if (err) {
          return cb(err);
        }
        if ((result != null ? (_ref = result.args) != null ? (_ref1 = _ref[0]) != null ? _ref1.body : void 0 : void 0 : void 0) == null) {
          return cb(err, null);
        }
        return cb(err, result.args[0].body);
      });
    };

    LolClient.prototype.getSummonerStats = function(account_id, cb) {
      var PlayerStatsPacket, cmd;
      if (this.options.debug) {
        logger.info("Fetching Summoner Stats for " + account_id);
      }
      PlayerStatsPacket = lolPackets.PlayerStatsPacket;
      cmd = new RTMPCommand(0x11, null, null, null, [new PlayerStatsPacket(this.options).generate(Number(account_id))]);
      return this.rtmp.send(cmd, function(err, result) {
        var _ref, _ref1;
        if (err) {
          return cb(err);
        }
        if ((result != null ? (_ref = result.args) != null ? (_ref1 = _ref[0]) != null ? _ref1.body : void 0 : void 0 : void 0) == null) {
          return cb(err, null);
        }
        return cb(err, result.args[0].body);
      });
    };

    LolClient.prototype.getMatchHistory = function(account_id, cb) {
      var RecentGamesPacket, cmd;
      if (this.options.debug) {
        logger.info("Fetching recent games for " + account_id);
      }
      RecentGamesPacket = lolPackets.RecentGamesPacket;
      cmd = new RTMPCommand(0x11, null, null, null, [new RecentGamesPacket(this.options).generate(Number(account_id))]);
      return this.rtmp.send(cmd, function(err, result) {
        var _ref, _ref1;
        if (err) {
          return cb(err);
        }
        if ((result != null ? (_ref = result.args) != null ? (_ref1 = _ref[0]) != null ? _ref1.body : void 0 : void 0 : void 0) == null) {
          return cb(err, null);
        }
        return cb(err, result.args[0].body);
      });
    };

    LolClient.prototype.getAggregatedStats = function(account_id, cb) {
      var AggregatedStatsPacket, cmd;
      AggregatedStatsPacket = lolPackets.AggregatedStatsPacket;
      cmd = new RTMPCommand(0x11, null, null, null, [new AggregatedStatsPacket(this.options).generate(Number(account_id))]);
      return this.rtmp.send(cmd, function(err, result) {
        var _ref, _ref1;
        if (err) {
          return cb(err);
        }
        if ((result != null ? (_ref = result.args) != null ? (_ref1 = _ref[0]) != null ? _ref1.body : void 0 : void 0 : void 0) == null) {
          return cb(err, null);
        }
        return cb(err, result.args[0].body);
      });
    };

    LolClient.prototype.getTeamsForSummoner = function(summoner_id, cb) {
      var GetTeamForSummonerPacket, cmd;
      GetTeamForSummonerPacket = lolPackets.GetTeamForSummonerPacket;
      cmd = new RTMPCommand(0x11, null, null, null, [new GetTeamForSummonerPacket(this.options).generate(Number(summoner_id))]);
      return this.rtmp.send(cmd, function(err, result) {
        var _ref, _ref1;
        if (err) {
          cb(err);
        }
        if ((result != null ? (_ref = result.args) != null ? (_ref1 = _ref[0]) != null ? _ref1.body : void 0 : void 0 : void 0) == null) {
          cb(err, null);
        }
        return cb(err, result.args[0].body);
      });
    };

    LolClient.prototype.getTeamById = function(team_id, cb) {
      var GetTeamByIdPacket, cmd;
      GetTeamByIdPacket = lolPackets.GetTeamByIdPacket;
      cmd = new RTMPCommand(0x11, null, null, null, [new GetTeamByIdPacket(this.options).generate(team_id)]);
      return this.rtmp.send(cmd, function(err, result) {
        var _ref, _ref1;
        if (err) {
          return cb(err);
        }
        if (!(result != null ? (_ref = result.args) != null ? (_ref1 = _ref[0]) != null ? _ref1.body : void 0 : void 0 : void 0)) {
          return cb(err, null);
        }
        return cb(err, result.args[0].body);
      });
    };

    LolClient.prototype.getSummonerData = function(account_id, cb) {
      var GetSummonerDataPacket, cmd;
      GetSummonerDataPacket = lolPackets.GetSummonerDataPacket;
      cmd = new RTMPCommand(0x11, null, null, null, [new GetSummonerDataPacket(this.options).generate(account_id)]);
      return this.rtmp.send(cmd, function(err, result) {
        var _ref, _ref1;
        if (err) {
          return cb(err);
        }
        if (!(result != null ? (_ref = result.args) != null ? (_ref1 = _ref[0]) != null ? _ref1.body : void 0 : void 0 : void 0)) {
          return cb(err, null);
        }
        return cb(err, result.args[0].body);
      });
    };

    LolClient.prototype.getSummonerName = function(name, cb) {
      var GetSummonerNamePacket, cmd;
      if (this.options.debug) {
        logger.info("Finding name by summonerId: " + name);
      }
      GetSummonerNamePacket = lolPackets.GetSummonerNamePacket;
      cmd = new RTMPCommand(0x11, null, null, null, [new GetSummonerNamePacket(this.options).generate(name)]);
      return this.rtmp.send(cmd, function(err, result) {
        var _ref, _ref1;
        if (err) {
          return cb(err);
        }
        if ((result != null ? (_ref = result.args) != null ? (_ref1 = _ref[0]) != null ? _ref1.body : void 0 : void 0 : void 0) == null) {
          return cb(err, null);
        }
        return cb(err, result.args[0].body);
      });
    };

    LolClient.prototype.getSpectatorInfo = function(name, cb) {
      var cmd, getSpectatorInfoPacket;
      if (this.options.debug) {
        logger.info("Finding spectator info by summonerId: " + name);
      }
      getSpectatorInfoPacket = lolPackets.GetSpectatorInfoPacket;
      cmd = new RTMPCommand(0x11, null, null, null, [new getSpectatorInfoPacket(this.options).generate(name)]);
      return this.rtmp.send(cmd, function(err, result) {
        var _ref, _ref1, _ref2, _ref3;
        if ((err != null ? (_ref = err.args) != null ? (_ref1 = _ref[0]) != null ? _ref1.error : void 0 : void 0 : void 0) != null) {
          return cb(err.args[0].error);
        }
        if (err) {
          return cb(err);
        }
        if ((result != null ? (_ref2 = result.args) != null ? (_ref3 = _ref2[0]) != null ? _ref3.body : void 0 : void 0 : void 0) == null) {
          return cb(err, null);
        }
        return cb(err, result.args[0].body);
      });
    };

    LolClient.prototype.getMasteryBook = function(summoner_id, cb) {
      var cmd, getMasteryBookPacket;
      if (this.options.debug) {
        logger.info("Finding masteries by summonerId: " + summoner_id);
      }
      getMasteryBookPacket = lolPackets.GetMasteryBookPacket;
      cmd = new RTMPCommand(0x11, null, null, null, [new getMasteryBookPacket(this.options).generate(summoner_id)]);
      return this.rtmp.send(cmd, function(err, result) {
        var _ref, _ref1;
        if (err) {
          return cb(err);
        }
        if ((result != null ? (_ref = result.args) != null ? (_ref1 = _ref[0]) != null ? _ref1.body : void 0 : void 0 : void 0) == null) {
          return cb(err, null);
        }
        return cb(err, result.args[0].body);
      });
    };

    LolClient.prototype.getAllLeaguesForPlayer = function(summoner_id, cb) {
      var GetAllLeaguesForPlayerPacket, cmd;
      if (this.options.debug) {
        logger.info("Finding leagues for summonerId: " + summoner_id);
      }
      GetAllLeaguesForPlayerPacket = lolPackets.GetAllLeaguesForPlayerPacket;
      cmd = new RTMPCommand(0x11, null, null, null, [new GetAllLeaguesForPlayerPacket(this.options).generate(summoner_id)]);
      return this.rtmp.send(cmd, function(err, result) {
        var _ref, _ref1;
        if (err) {
          return cb(err);
        }
        if ((result != null ? (_ref = result.args) != null ? (_ref1 = _ref[0]) != null ? _ref1.body : void 0 : void 0 : void 0) == null) {
          return cb(err, null);
        }
        return cb(err, result.args[0].body);
      });
    };

    LolClient.prototype.keepAlive = function(cb) {
      var HeartbeatPacket, cmd;
      if (this.options.debug) {
        logger.info("Sending Heartbeat");
      }
      HeartbeatPacket = lolPackets.HeartbeatPacket;
      cmd = new RTMPCommand(0x11, null, null, null, [new HeartbeatPacket(this.options).generate(this.options.account_id, this.keep_alive_counter)]);
      return this.rtmp.send(cmd, (function(_this) {
        return function(err, result) {
          var _ref, _ref1;
          _this.keep_alive_counter += 1;
          if (err) {
            return cb(err);
          }
          if ((result != null ? (_ref = result.args) != null ? (_ref1 = _ref[0]) != null ? _ref1.body : void 0 : void 0 : void 0) == null) {
            return cb(err, null);
          }
          return cb(err, result.args[0].body);
        };
      })(this));
    };

    return LolClient;

  })(EventEmitter);

  module.exports = LolClient;

}).call(this);
