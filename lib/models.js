// Generated by CoffeeScript 1.6.2
(function() {
  var Leagues, MasteryBook, PlayerNames, PlayerStats, RecentGames, RunePage, Search, SpectatorInfo, Summoner, cmp, debug, group_by, has_key, index_of_object, json, logger,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  json = JSON.stringify;

  logger = require('winston');

  debug = require('../settings.json').debug;

  has_key = function(obj, key) {
    return obj.hasOwnProperty(key);
  };

  index_of_object = function(array, key, value) {
    var index, iter, _i, _len;

    index = 0;
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      iter = array[_i];
      if (iter[key] === value) {
        return index;
      }
      index += 1;
    }
    return -1;
  };

  cmp = function(a, b) {
    if (a < b) {
      return -1;
    } else if (a > b) {
      return 1;
    } else {
      return 0;
    }
  };

  group_by = function(array, group) {
    var grouper, item, result, _i, _len;

    result = {};
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      item = array[_i];
      grouper = group(item);
      if (!has_key(result, grouper)) {
        result[grouper] = [];
      }
      result[grouper].push(item);
    }
    return result;
  };

  PlayerNames = (function() {
    function PlayerNames(cb, options) {
      this.cb = cb;
      this.get = __bind(this.get, this);
      this.parse = __bind(this.parse, this);
      if (options != null) {
        if (options.hasOwnProperty('client')) {
          this.client = options.client;
        }
        if (options.hasOwnProperty('summoners')) {
          this.summoners = summoners;
        }
      }
      this.data = [];
    }

    PlayerNames.prototype.parse = function() {};

    PlayerNames.prototype.get = function(args) {
      var _this = this;

      this.summoners = args.summoners;
      return this.client.getSummonerName(this.summoners, function(err, result) {
        var data;

        if (err != null) {
          data = err;
        } else {
          data = result.data;
        }
        return _this.cb(data, {
          requests: 1
        });
      });
    };

    return PlayerNames;

  })();

  PlayerStats = (function() {
    function PlayerStats(cb, options) {
      this.cb = cb;
      this.toJSON = __bind(this.toJSON, this);
      this.get = __bind(this.get, this);
      this.parse = __bind(this.parse, this);
      if (options != null) {
        if (options.hasOwnProperty('client')) {
          this.client = options.client;
        }
        if (options.hasOwnProperty('stats')) {
          this.org = options.stats;
          this.account_id = this.org.userId.value;
        }
      }
      this.data = [];
    }

    PlayerStats.prototype.parse = function() {
      var current, game_type, stat, stats, _i, _j, _len, _len1, _ref, _ref1;

      this.data = [];
      _ref = this.org.playerStatSummaries.object.playerStatSummarySet.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        game_type = _ref[_i];
        stats = game_type.object;
        current = {
          'game_type': stats.playerStatSummaryTypeString,
          'rating': stats.rating,
          'rating_max': stats.maxRating,
          'wins': stats.wins,
          'losses': stats.losses,
          'leaves': stats.leaves,
          'aggregated_stats': {}
        };
        _ref1 = stats.aggregatedStats.object.stats.data;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          stat = _ref1[_j];
          current['aggregated_stats'][stat.object.statType.toLowerCase()] = stat.object.value.value;
        }
        this.data.push(current);
      }
      return this.data;
    };

    PlayerStats.prototype.get = function(args) {
      var account_id,
        _this = this;

      account_id = args.account_id;
      return this.client.getSummonerStats(account_id, function(err, result) {
        var data;

        if (err != null) {
          data = err;
        } else if (result == null) {
          _this.data = {
            'error': 'RETRY'
          };
        } else {
          _this.org = result.object;
          _this.account_id = _this.org.userId.value;
          _this.parse();
        }
        return _this.cb(_this.data, {
          account_id: _this.account_id,
          requests: 1
        });
      });
    };

    PlayerStats.prototype.toJSON = function() {
      return json(this.data);
    };

    return PlayerStats;

  })();

  RecentGames = (function() {
    function RecentGames(cb, options) {
      this.cb = cb;
      this.toJSON = __bind(this.toJSON, this);
      this.get = __bind(this.get, this);
      this.parse = __bind(this.parse, this);
      if (options.hasOwnProperty('client')) {
        this.client = options.client;
      }
      if (options.hasOwnProperty('games')) {
        this.org = games;
        this.account_id = this.org.userId.value;
      }
      this.data = [];
    }

    RecentGames.prototype.parse = function() {
      var current, game, key, ogame, player, stat, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;

      this.data = [];
      _ref = this.org.gameStatistics.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ogame = _ref[_i];
        game = ogame.object;
        current = {
          'id': game.gameId.value,
          'game_map': game.gameMapId,
          'game_mode': game.gameMode,
          'game_type': game.gameType,
          'ranked': game.ranked,
          'team': game.teamId.value === 100 ? 'blue' : 'purple',
          'afk': game.afk,
          'leaver': game.leaver,
          'invalid': game.invalid,
          'ip_earned': game.ipEarned.value,
          'xp_earned': game.experienceEarned.value,
          'boost_ip': game.boostIpEarned.value,
          'boost_xp': game.boostXpEarned.value,
          'champion': game.championId.value,
          'date': game.createDate,
          'players': (function() {
            var _j, _len1, _ref1, _results;

            _ref1 = game.fellowPlayers.data;
            _results = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              player = _ref1[_j];
              _results.push(player.object.summonerId.value);
            }
            return _results;
          })(),
          'summoner_level': game.level.value,
          'premade_size': game.premadeSize,
          'premade_team': game.premadeTeam,
          'skin_index': game.skinIndex,
          'skin_name': game.skinName,
          'summoner_spell_one': game.spell1.value,
          'summoner_spell_two': game.spell2.value,
          'queue_length': game.timeInQueue,
          'queue_type': game.queueType,
          'ping': game.userServerPing,
          'stats': {}
        };
        _ref1 = game.statistics.data;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          stat = _ref1[_j];
          current['stats'][stat.object.statType.toLowerCase()] = stat.object.value.value;
        }
        _ref2 = ['champions_killed', 'num_deaths', 'assists', 'largest_critical_strike', 'largest_killing_spree', 'largest_multi_kill', 'item0', 'item1', 'item2', 'item3', 'item4', 'item5', 'minions_killed', 'neutral_minions_killed', 'neutral_minions_killed_your_jungle', 'neutral_minions_killed_enemy_jungle', 'gold_earned', 'physical_damage_dealt_player', 'physical_damage_dealt_to_champions', 'magic_damage_dealt_player', 'magic_damage_dealt_to_champions', 'true_damage_dealt_player', 'true_damage_dealt_to_champions', 'total_damage_dealt', 'total_damage_dealt_to_champions', 'physical_damage_taken', 'magic_damage_taken', 'true_damage_taken', 'total_damage_taken', 'total_heal', 'total_time_spent_dead', 'total_time_crowd_control_dealt', 'turrets_killed', 'barracks_killed', 'lose', 'win', 'sight_wards_bought_in_game', 'vision_wards_bought_in_game', 'ward_placed', 'ward_killed', 'node_neutralize', 'node_neutralize_assist', 'node_capture', 'node_capture_assist', 'victory_point_total', 'team_objective', 'objective_player_score', 'combat_player_score', 'total_player_score', 'total_score_rank'];
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          key = _ref2[_k];
          if (!has_key(current.stats, key)) {
            current.stats[key] = 0;
          }
        }
        this.data.push(current);
        this.data.sort(function(a, b) {
          if (a.id > b.id) {
            return -1;
          } else if (a.id < b.id) {
            return 1;
          } else {
            return 0;
          }
        });
      }
      return this.data;
    };

    RecentGames.prototype.get = function(args) {
      var account_id,
        _this = this;

      account_id = args.account_id;
      return this.client.getMatchHistory(account_id, function(err, result) {
        var data;

        if (err != null) {
          logger.error('models: recent games: Error', err);
          data = err;
        } else if (result == null) {
          _this.data = {
            'error': 'RETRY'
          };
        } else {
          _this.org = result.object;
          _this.account_id = _this.org.userId.value;
          _this.parse();
        }
        return _this.cb(_this.data, {
          'account_id': _this.account_id,
          'requests': 1
        });
      });
    };

    RecentGames.prototype.toJSON = function() {
      return json(this.data);
    };

    return RecentGames;

  })();

  Summoner = (function() {
    function Summoner(cb, options) {
      this.cb = cb;
      this.toJSON = __bind(this.toJSON, this);
      this.get = __bind(this.get, this);
      this.parse = __bind(this.parse, this);
      if (options != null) {
        if (options.hasOwnProperty('client')) {
          this.client = options.client;
        }
        if (options.hasOwnProperty('summoner')) {
          this.summoner = options.summoner;
          this.account_id = this.summoner.acctId.value;
        }
        if (options.extra != null) {
          if (options.extra.runes != null) {
            this.runes = options.extra.runes;
          }
          if (options.extra.masteries != null) {
            this.masteries = options.extra.masteries;
          }
        }
      }
      this.data = {};
      this.requests = 0;
    }

    Summoner.prototype.parse = function() {
      var current;

      this.data = {};
      if (this.summoner == null) {
        this.data = {
          'error': 'RETRY'
        };
        return this.data;
      }
      current = {
        'account_id': this.summoner.acctId.value,
        'summoner_id': this.summoner.sumId.value,
        'internal_name': this.summoner.internalName,
        'name': this.summoner.name,
        'level': this.org.object.summonerLevelAndPoints.object.summonerLevel.value,
        'profile_icon': this.summoner.profileIconId,
        'season_one_tier': this.summoner.seasonOneTier,
        'season_two_tier': this.summoner.seasonTwoTier
      };
      this.data = current;
      return this.data;
    };

    Summoner.prototype.get = function(args) {
      var found_account_id,
        _this = this;

      found_account_id = function() {
        return _this.client.getSummonerData(_this.account_id, function(err, result) {
          var extra, _ref;

          if (err != null) {
            _this.data = err;
          } else if (result == null) {
            _this.data = {
              'error': 'RETRY'
            };
          } else {
            _this.org = result;
            _this.summoner = result.object.summoner.object;
            _this.account_id = _this.summoner.acctId.value;
            _this.parse();
          }
          extra = {
            requests: _this.requests + 1
          };
          if (_this.runes && (((_ref = _this.org) != null ? _ref.object : void 0) != null)) {
            extra['runes'] = new RunePage({
              'book': _this.org.object.spellBook.object
            }).parse();
          }
          return _this.cb(_this.data, extra);
        });
      };
      if (has_key(args, 'account_id')) {
        this.account_id = args.account_id;
        return found_account_id();
      } else if (has_key(args, 'name')) {
        return this.client.getSummonerByName(args.name, function(err, result) {
          var banned_ids;

          _this.requests += 1;
          if (err != null) {
            _this.data = err;
            return _this.cb(_this.data, {
              requests: _this.requests
            });
          } else if (result == null) {
            banned_ids = [
              {
                'name': 'IS1e93c4e08bfebb',
                'summoner_id': 23024970
              }
            ];
            if (index_of_object(banned_ids, 'name', args.name) !== -1) {
              _this.data = {
                'error': 'BANNED'
              };
            } else {
              _this.data = {
                'error': 'RETRY'
              };
            }
            return _this.cb(_this.data, {
              'requests': _this.requests
            });
          } else {
            _this.account_id = result.object.acctId.value;
            return found_account_id();
          }
        });
      }
    };

    Summoner.prototype.toJSON = function() {
      return json(this.data);
    };

    return Summoner;

  })();

  Leagues = (function() {
    function Leagues(cb, options) {
      this.cb = cb;
      this.toJSON = __bind(this.toJSON, this);
      this.get = __bind(this.get, this);
      this.parse = __bind(this.parse, this);
      if (options != null) {
        if (has_key(options, 'client')) {
          this.client = options.client;
        }
        if (has_key(options, 'leagues')) {
          this.leagues = options.leagues;
          this.summoner_id = options.summoner_id;
        }
      }
      this.tiers = {
        'bronze': 1,
        'silver': 2,
        'gold': 3,
        'platinum': 4,
        'diamond': 5,
        'challenger': 6
      };
      this.ranks = {
        'i': 1,
        'ii': 2,
        'iii': 3,
        'iv': 4,
        'v': 5
      };
      this.data = [];
    }

    Leagues.prototype.parse = function() {
      var current, entries, entry, i, league, league_rank, miniSeries, _i, _j, _len, _len1, _ref, _ref1,
        _this = this;

      this.data = [];
      _ref = this.leagues;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        league = _ref[_i];
        league = league.object;
        if (league.queue !== 'RANKED_SOLO_5x5' || league.requestorsRank === 'null') {
          continue;
        }
        if (debug) {
          logger.debug('models: Leagues: ', league);
        }
        league_rank = this.ranks[league.requestorsRank.toLowerCase()];
        current = {
          'queue': league.queue,
          'name': league.name,
          'tier': this.tiers[league.tier.toLowerCase()]
        };
        entries = group_by(league.entries.data, function(item) {
          return item.object.rank;
        });
        entries[league.requestorsRank].sort(function(a, b) {
          var a_losses, a_mini_series, a_mini_series_games, a_points, a_wins, b_losses, b_mini_series, b_mini_series_games, b_points, b_wins, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;

          _ref1 = [a.object.leaguePoints, b.object.leaguePoints], a_points = _ref1[0], b_points = _ref1[1];
          _ref2 = [a.object.wins, b.object.wins], a_wins = _ref2[0], b_wins = _ref2[1];
          _ref3 = [a.object.losses, b.object.losses], a_losses = _ref3[0], b_losses = _ref3[1];
          _ref4 = [a.object.miniSeries, b.object.miniSeries], a_mini_series = _ref4[0], b_mini_series = _ref4[1];
          if (a_mini_series !== null && b_mini_series === null) {
            return -1;
          } else if (a_mini_series === null && b_mini_series !== null) {
            return 1;
          } else if (a_mini_series !== null && b_mini_series !== null) {
            _ref5 = [a_mini_series.object, b_mini_series.object], a_mini_series = _ref5[0], b_mini_series = _ref5[1];
            _ref6 = [a_mini_series.wins + a_mini_series.losses, b_mini_series.wins + b_mini_series.losses], a_mini_series_games = _ref6[0], b_mini_series_games = _ref6[1];
            if (a_mini_series_games > b_mini_series_games) {
              return -1;
            } else if (a_mini_series_games < b_mini_series_games) {
              return 1;
            } else {
              return cmp(a_mini_series.win, b_mini_series.wins);
            }
          } else {
            if (a_points === b_points) {
              if (a_wins === b_wins) {
                return b_losses - a_losses;
              } else {
                return b_wins - a_wins;
              }
            } else {
              return b_points - a_points;
            }
          }
        });
        i = 0;
        _ref1 = entries[league.requestorsRank];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          entry = _ref1[_j];
          entry = entry.object;
          i += 1;
          if (entry.playerOrTeamId !== String(this.summoner_id)) {
            continue;
          }
          current['rank'] = this.ranks[entry.rank.toLowerCase()];
          current['league_rank'] = i;
          current['league_points'] = entry.leaguePoints;
          current['wins'] = entry.wins;
          current['losses'] = entry.losses;
          current['hot_streak'] = entry.hotStreak;
          current['fresh_blood'] = entry.freshBlood;
          current['inactive'] = entry.inactive;
          current['veteran'] = entry.veteran;
          if (entry.miniSeries !== null) {
            miniSeries = entry.miniSeries.object;
            current['mini_series'] = {
              'target': miniSeries.target,
              'wins': miniSeries.wins,
              'losses': miniSeries.losses
            };
          } else {
            current['mini_series'] = null;
          }
          break;
        }
        this.data.push(current);
      }
      return this.data;
    };

    Leagues.prototype.get = function(args) {
      var summoner_id,
        _this = this;

      summoner_id = args.summoner_id;
      return this.client.getAllLeaguesForPlayer(summoner_id, function(err, result) {
        if (err != null) {
          _this.data = err;
        } else if (err === null && result === null) {
          _this.data = {};
        } else if (result == null) {
          _this.data = {
            'error': 'RETRY'
          };
        } else {
          _this.summoner_id = summoner_id;
          _this.leagues = result.object.summonerLeagues.data;
          _this.parse();
        }
        return _this.cb(_this.data, {
          'requests': 1,
          'summoner_id': summoner_id
        });
      });
    };

    Leagues.prototype.toJSON = function() {
      return json(this.data);
    };

    return Leagues;

  })();

  Search = (function() {
    function Search(cb, options) {
      this.cb = cb;
      this.toJSON = __bind(this.toJSON, this);
      this.get = __bind(this.get, this);
      this.parse = __bind(this.parse, this);
      if (options != null) {
        if (has_key(options, 'client')) {
          this.client = options.client;
        }
        if (has_key(options, 'search')) {
          this.search = options.search;
          this.account_id = this.search.account_id;
        }
      }
      this.data = {};
    }

    Search.prototype.parse = function() {
      var current;

      if (debug) {
        logger.debug('models: search: ', this.search);
      }
      this.data = {};
      current = {
        'account_id': this.search.acctId.value,
        'summoner_id': this.search.summonerId.value,
        'internal_name': this.search.internalName,
        'name': this.search.name,
        'level': this.search.summonerLevel.value,
        'profile_icon': this.search.profileIconId,
        'region': this.client.options.region
      };
      this.data = current;
      return this.data;
    };

    Search.prototype.get = function(args) {
      var name,
        _this = this;

      name = args.name;
      return this.client.getSummonerByName(name, function(err, result) {
        if (err != null) {
          _this.data = err;
        } else if (err === null && result === null) {
          _this.data = {};
        } else {
          _this.account_id = result.object.acctId.value;
          _this.search = result.object;
          _this.parse();
        }
        return _this.cb(_this.data, {
          requests: 1
        });
      });
    };

    Search.prototype.toJSON = function() {
      return json(this.data);
    };

    return Search;

  })();

  RunePage = (function() {
    function RunePage(options) {
      this.toJSON = __bind(this.toJSON, this);
      this._rsort = __bind(this._rsort, this);
      this._msort = __bind(this._msort, this);
      this.parse = __bind(this.parse, this);      if (options != null) {
        if (has_key(options, 'client')) {
          this.client = options.client;
        }
        if (has_key(options, 'book')) {
          this.book = options.book;
        }
      }
      this.data = [];
    }

    RunePage.prototype.parse = function() {
      var current, page, rune, tmp, _i, _j, _len, _len1, _ref, _ref1;

      this.data = [];
      _ref = this.book.bookPages.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        page = _ref[_i];
        page = page.object;
        if (page.name.match(/@@!PaG3!@@\d+/)) {
          continue;
        }
        current = {
          'id': page.pageId.value,
          'name': page.name,
          'created': page.createDate,
          'active': page.current,
          'slots': []
        };
        _ref1 = page.slotEntries.data;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          rune = _ref1[_j];
          rune = rune.object;
          tmp = {
            'slot': rune.runeSlotId,
            'id': rune.runeId
          };
          current.slots.push(tmp);
        }
        current.slots.sort(this._rsort);
        this.data.push(current);
      }
      this.data.sort(this._msort);
      return this.data;
    };

    RunePage.prototype._msort = function(a, b) {
      if (a.id < b.id) {
        return -1;
      } else if (a.id === b.id) {
        return 0;
      } else {
        return 1;
      }
    };

    RunePage.prototype._rsort = function(a, b) {
      if (a.slot < b.slot) {
        return -1;
      } else if (a.slot === b.slot) {
        return 0;
      } else {
        return 1;
      }
    };

    RunePage.prototype.toJSON = function() {
      return json(this.data);
    };

    return RunePage;

  })();

  MasteryBook = (function() {
    function MasteryBook(cb, options) {
      this.cb = cb;
      this.toJSON = __bind(this.toJSON, this);
      this._msort = __bind(this._msort, this);
      this.get = __bind(this.get, this);
      this.parse = __bind(this.parse, this);
      if (options != null) {
        if (has_key(options, 'client')) {
          this.client = options.client;
        }
        if (has_key(options, 'book')) {
          this.book = options.book;
        }
      }
    }

    MasteryBook.prototype.parse = function() {
      var current, id, page, talent, tmp, _i, _j, _len, _len1, _ref, _ref1;

      this.data = {};
      current = [];
      _ref = this.book.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        page = _ref[_i];
        page = page.object;
        if (page.name.match(/@@!PaG3!@@\d+/)) {
          continue;
        }
        id = page.pageId.value;
        tmp = {
          'id': id,
          'name': page.name,
          'current': page.current,
          'talents': []
        };
        _ref1 = page.talentEntries.data;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          talent = _ref1[_j];
          talent = talent.object;
          tmp.talents.push({
            'id': talent.talentId,
            'rank': talent.rank
          });
        }
        tmp.talents.sort(this._msort);
        current.push(tmp);
      }
      current.sort(this._msort);
      this.data = current;
      return this.data;
    };

    MasteryBook.prototype.get = function(args) {
      var _this = this;

      this.summoner_id = args.summoner_id;
      this.account_id = args.account_id;
      return this.client.getMasteryBook(this.summoner_id, function(err, result) {
        if (err != null) {
          _this.data = err;
        } else {
          _this.book = result.object.bookPages;
          _this.parse();
        }
        return _this.cb(_this.data, {
          'account_id': _this.account_id,
          requests: 1
        });
      });
    };

    MasteryBook.prototype._msort = function(a, b) {
      if (a.id < b.id) {
        return -1;
      } else if (a.id === b.id) {
        return 0;
      } else {
        return 1;
      }
    };

    MasteryBook.prototype.toJSON = function() {
      return json(this.data);
    };

    return MasteryBook;

  })();

  SpectatorInfo = (function() {
    function SpectatorInfo(cb, options) {
      this.cb = cb;
      this.toJSON = __bind(this.toJSON, this);
      this.get = __bind(this.get, this);
      this.parse = __bind(this.parse, this);
      if (options != null) {
        if (has_key(options, 'client')) {
          this.client = options.client;
        }
        if (has_key(options, 'info')) {
          this.info = options.info;
        }
      }
      this.data = {};
    }

    SpectatorInfo.prototype.parse = function() {
      var add_players, ban, champion, current, index, regions, _i, _len, _ref;

      this.data = {};
      regions = {
        'na': 'NA1',
        'euw': 'EUW1',
        'eune': 'EUN1'
      };
      current = {
        'key': this.info.playerCredentials.object.observerEncryptionKey,
        'ip': this.info.playerCredentials.object.observerServerIp,
        'port': this.info.playerCredentials.object.observerServerPort,
        'game_id': this.info.playerCredentials.object.gameId.value,
        'region': regions[this.client.options.region],
        'name': this.info.game.object.name
      };
      if (this.full) {
        current.info = {
          'id': this.info.game.object.id.value,
          'game_map': this.info.game.object.mapId,
          'game_mode': this.info.game.object.gameMode,
          'game_type': this.info.game.object.gameType,
          'queue_type': this.info.game.object.queueTypeName,
          'bans': this.info.game.object.bannedChampions.data.length > 0 ? (function() {
            var _i, _len, _ref, _results;

            _ref = this.info.game.object.bannedChampions.data;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              ban = _ref[_i];
              _results.push({
                'champion': ban.object.championId,
                'turn': ban.object.pickTurn,
                'team': ban.object.teamId === 100 ? 'blue' : 'purple'
              });
            }
            return _results;
          }).call(this) : [],
          'players': []
        };
        add_players = function(data, team) {
          var player, _i, _len, _results;

          _results = [];
          for (_i = 0, _len = data.length; _i < _len; _i++) {
            player = data[_i];
            _results.push(current.info.players.push({
              'account_id': player.object.accountId.value,
              'summoner_id': player.object.summonerId.value,
              'internal_name': player.object.summonerInternalName,
              'name': player.object.summonerName,
              'turn': player.object.pickTurn,
              'team': team
            }));
          }
          return _results;
        };
        add_players(this.info.game.object.teamOne.data, 'blue');
        add_players(this.info.game.object.teamTwo.data, 'purple');
        _ref = this.info.game.object.playerChampionSelections.data;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          champion = _ref[_i];
          index = index_of_object(current.info.players, 'internal_name', champion.object.summonerInternalName);
          current.info.players[index]['champion'] = champion.object.championId;
          current.info.players[index]['summoner_spell_one'] = champion.object.spell1Id.value;
          current.info.players[index]['summoner_spell_two'] = champion.object.spell2Id.value;
        }
      }
      this.data = current;
      return this.data;
    };

    SpectatorInfo.prototype.get = function(args) {
      var name,
        _this = this;

      name = args.name;
      return this.client.getSpectatorInfo(name, function(err, result) {
        if (has_key(args, 'full')) {
          _this.full = args.full;
        }
        if (err != null) {
          _this.data = {
            'error': err
          };
        } else {
          _this.info = result.object;
          _this.parse();
          if (args.debug) {
            _this.data.debug = {
              'err': err,
              'res': result.object
            };
          }
        }
        return _this.cb(_this.data, {
          requests: 1
        });
      });
    };

    SpectatorInfo.prototype.toJSON = function() {
      return json(this.data);
    };

    return SpectatorInfo;

  })();

  exports.PlayerNames = PlayerNames;

  exports.PlayerStats = PlayerStats;

  exports.RecentGames = RecentGames;

  exports.Summoner = Summoner;

  exports.Leagues = Leagues;

  exports.RunePage = RunePage;

  exports.Search = Search;

  exports.MasteryBook = MasteryBook;

  exports.SpectatorInfo = SpectatorInfo;

}).call(this);
